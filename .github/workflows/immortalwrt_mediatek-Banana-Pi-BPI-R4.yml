name: immortalwrt_mediatek-Banana-Pi-BPI-R4

on:
  schedule:
    - cron: 0 20 * * *

  release:
    types: [published]
  
  watch:
    types: [started]


  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
        
      CACHE_BUILD:
        description: '缓存加速'
        required: false
        default: 'true'
        type: boolean

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: immortalwrt/mediatek/defconfig
  DIY_P1_SH: immortalwrt/diy-part1-test.sh
  DIY_P2_SH: immortalwrt/diy-part2-1.sh
  Firmware_Name: immortalwrt_mediatek-Banana-Pi-BPI-R4
  # DIR: bpi-r4
  OPENWRT_NAME: immortalwrt
  OPENWRT_DEVICE: mediatek
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  UPLOAD_BIN_DIR: false
  UPLOAD_BUILDINFO: true
  UPLOAD_PACKAGE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  TZ: Asia/Shanghai


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Check out the project branch
        uses: actions/checkout@main

      - name: Initialize the compilation environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          ( sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential clang flex g++ gawk gcc-multilib gettext \
          git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev swig libpython3-dev aria2 jq subversion qemu-utils ccache rename libelf-dev
          sudo -E apt-get -qq purge azure-cli ghc* zulu* hhvm llvm* firefox powershell openjdk* dotnet* google* mysql* php* android* rename speedtest-cli
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean ) &
          sudo timedatectl set-timezone "$TZ"

      - name: Initialize Environment and Display System Info
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          chmod +x $OPENWRT_NAME/*.sh
          $GITHUB_WORKSPACE/$OPENWRT_NAME/system-Information.sh

      - name: Download firmware source code
        run: |
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt


      - name: 缓存
        uses: klever1988/cachewrtbuild@main
        if: env.CACHE_BUILD == 'true' || (github.event.inputs.CACHE_BUILD == 'true')
        with:
          ccache: 'true'
          clean: 'false'
          mixkey: '${{ env.Firmware_Name }}-${{ env.START_SECONDS }}'
          prefix: ${{ github.workspace }}/openwrt


      - name: Update & install feeds
        working-directory: ./openwrt
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load feeds.conf.default
        run: |
          chmod +x $OPENWRT_NAME/*.sh
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Load config
        run: |
          [ -e "$CONFIG_FILE" ] && cat "$CONFIG_FILE" > openwrt/.config
          chmod +x $OPENWRT_NAME/*.sh && cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: Download the installation package
        id: package
        run: |
          cd openwrt
          make defconfig
          cat .config
          make download -j$(nproc)
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}   


      - name: Compile the firmware
        id: date
        run: |
          cd openwrt
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "date1=$(date +'%Y.%m.%d-%H.%M')" >> $GITHUB_ENV
          echo "date2=$(date "+%Y年%m月%d日-%H点%M分")" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Organize and Rename Files
        id: organize
        if: ${{ env.UPLOAD_FIRMWARE == 'true' && !cancelled() }}
        run: |
          cd openwrt/bin/targets/mediatek/filogic
          rm -rf packages *mt798* *.config *.buildinfo *.json sha256sums 
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
          
      # - name: Upload the firmware to github
      #   uses: actions/upload-artifact@main
      #   if: steps.organize.outputs.status == 'success' && !cancelled()
      #   with:
      #     name: ${{ env.date1 }}_${{ env.Firmware_Name }}_${{ env.OPENWRT_DEVICE }}
      #     path: ${{ env.FIRMWARE }}


      - name: 整理固件文件
        id: artifact
        if: steps.organize.outputs.status == 'success' && !cancelled()
        run: |
          cd openwrt
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
          cp -rf ./.config ./artifact/buildinfo/${{ env.Firmware_Name }}.info
          cp -rf ./.config ./artifact/firmware/${{ env.Firmware_Name }}.info
          cp -rf ./feeds.conf.default ./artifact/buildinfo/ 
          cd artifact/firmware/
          # rename "s/openwrt/${{ env.Firmware_Name }}/" *
          
        
      - name: 上传固件
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.Firmware_Name }}_firmware_${{ env.date1 }}
          path: openwrt/artifact/firmware/

      - name: 上传配置文件
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_BUILDINFO == 'true' && !cancelled()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.Firmware_Name }}_buildinfo_${{ env.date1 }}
          path: openwrt/artifact/buildinfo/

      - name: 上传插件
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_PACKAGE == 'true' && !cancelled()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.Firmware_Name }}_package_${{ env.date1 }}
          path: openwrt/artifact/package/

      - name: 生成发布标签
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=${{ env.date2 }}" >> $GITHUB_OUTPUT
          touch release.txt
          echo "
          📥 固件下载 ${{ env.date1 }}_${{ env.Firmware_Name }}_${{ env.OPENWRT_DEVICE }}
          
          ★ 源码 : ${{ env.REPO_URL }} 
          
          ★ 分支 : ${{ env.REPO_BRANCH }} 
          
          ★ 感谢源码作者无私分享！ " >> release.txt
          
          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: Publish to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ env.FIRMWARE }}/*
          name: ${{ env.date3 }}
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
